// <auto-generated />
using System;
using Bridge.ERP;
using Bridge.ERP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bridge.ERP.Migrations
{
    [DbContext(typeof(bidbdesenvContext))]
    [Migration("20210718040856_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Bridge.ERP.Campaigns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MarketType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Pipeline")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Bridge.ERP.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("parent_id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Bridge.ERP.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idCliente")
                        .HasColumnType("int(11)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnName("CNPJ")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOME")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("STATUS")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdCliente")
                        .HasName("PRIMARY");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Bridge.ERP.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("CreatedType")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("CriticalStatus")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email2")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsHotContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("LocationsCount")
                        .HasColumnType("double");

                    b.Property<string>("MainCity")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MainState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("SourceName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("TenantId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Vipcontact")
                        .HasColumnName("VIPContact")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .HasName("IndexAddress");

                    b.HasIndex("City")
                        .HasName("IndexCity");

                    b.HasIndex("TenantId")
                        .HasName("TenantId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Bridge.ERP.ContactsLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .HasName("LocationId");

                    b.HasIndex("TenantId")
                        .HasName("TenantId");

                    b.ToTable("ContactsLocations");
                });

            modelBuilder.Entity("Bridge.ERP.Customers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PaymentCheck")
                        .HasColumnType("int(11)");

                    b.Property<int>("PaymentOption")
                        .HasColumnType("int(11)");

                    b.Property<int>("PaymentPeriod")
                        .HasColumnType("int(11)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Bridge.ERP.CycleCampaignsTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int(11)");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("CycleStatus")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId")
                        .HasName("CampaignId");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("CycleCampaignsTransactions");
                });

            modelBuilder.Entity("Bridge.ERP.ImportHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("FailReason")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ImportedCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ListStatus")
                        .IsRequired()
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<int>("NotImportedCount")
                        .HasColumnType("int(11)");

                    b.Property<int>("RecordsCount")
                        .HasColumnType("int(11)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.Property<int>("UpdatedCount")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("TenantId");

                    b.ToTable("ImportHistory");
                });

            modelBuilder.Entity("Bridge.ERP.Lancamento", b =>
                {
                    b.Property<int>("IdLancamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idLancamento")
                        .HasColumnType("int(11)");

                    b.Property<string>("Apolice")
                        .IsRequired()
                        .HasColumnName("APOLICE")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Endosso")
                        .IsRequired()
                        .HasColumnName("ENDOSSO")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<int>("IdCorretora")
                        .HasColumnName("ID_CORRETORA")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdSeguradora")
                        .HasColumnName("ID_SEGURADORA")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("MesReferencia")
                        .HasColumnName("MES_REFERENCIA")
                        .HasColumnType("date");

                    b.Property<string>("Ordem")
                        .IsRequired()
                        .HasColumnName("ORDEM")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Prc")
                        .HasColumnName("PRC")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<decimal>("Premio")
                        .HasColumnName("PREMIO")
                        .HasColumnType("decimal(30,0)");

                    b.Property<string>("Ramo")
                        .HasColumnName("RAMO")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Segurado")
                        .HasColumnName("SEGURADO")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("STATUS")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("StatusContabil")
                        .IsRequired()
                        .HasColumnName("STATUS_CONTABIL")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<double>("Taxa")
                        .HasColumnName("TAXA")
                        .HasColumnType("double");

                    b.Property<decimal>("ValorCms")
                        .HasColumnName("VALOR_CMS")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("Vencto")
                        .HasColumnName("VENCTO")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Vigencia")
                        .HasColumnName("VIGENCIA")
                        .HasColumnType("date");

                    b.HasKey("IdLancamento")
                        .HasName("PRIMARY");

                    b.ToTable("Lancamento");
                });

            modelBuilder.Entity("Bridge.ERP.LeadsFollowUps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("LeadStatus")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(6000)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .HasName("FK_Properties");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("LeadsFollowUps");
                });

            modelBuilder.Entity("Bridge.ERP.Lists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ListDescription")
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("Bridge.ERP.Locations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CountryName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("County")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Longitude")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Neighborhood")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StateCode")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("StateName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Bridge.ERP.LogAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("ComputerId")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SourceId")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("LogAccess");
                });

            modelBuilder.Entity("Bridge.ERP.Models.Phones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Score")
                        .HasColumnType("int(11)");

                    b.Property<string>("SkipTraceSource")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Bridge.ERP.Models.Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ApnNumber")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("BathroomCount")
                        .HasColumnType("double");

                    b.Property<double?>("BedroomCount")
                        .HasColumnType("double");

                    b.Property<string>("CriticalStatus")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Email2")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("EquityCurrentEstimatedBalance")
                        .HasColumnType("double");

                    b.Property<double?>("EstimatedValue")
                        .HasColumnType("double");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("HotLead")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IsMailingVacant")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IsVacant")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastSalePrice")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastStaleDate")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("ListCount")
                        .HasColumnType("double");

                    b.Property<double?>("LotSizeSquareFeet")
                        .HasColumnType("double");

                    b.Property<double?>("LtvCurrentEstimatedCombined")
                        .HasColumnType("double");

                    b.Property<double?>("MailerCount")
                        .HasColumnType("double");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MailingCity")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MailingCounty")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MailingState")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MailingZip")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MatchCrm")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MlsStatus")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OptOut")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Owner2FirstName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Owner2LastName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OwnerOccupied")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PrimaryListSource")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PrimaryListType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyCity")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyCounty")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyState")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyType")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("PropertyTypeDetail")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PropertyZip")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.Property<double?>("TotalAssessedValue")
                        .HasColumnType("double");

                    b.Property<double?>("TotalBuildingAreaSquareFeet")
                        .HasColumnType("double");

                    b.Property<string>("TotalOpenLienBalance")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("YearBuilt")
                        .HasColumnType("double");

                    b.Property<string>("ZoningCode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("PropertyAddress")
                        .HasName("PropertiesAddress");

                    b.HasIndex("PropertyCity")
                        .HasName("PropertiesCity");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Bridge.ERP.Models.PropertiesLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ListId")
                        .HasColumnType("int(11)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ListId")
                        .HasName("id_list");

                    b.HasIndex("PropertyId")
                        .HasName("id_property");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("PropertiesLists");
                });

            modelBuilder.Entity("Bridge.ERP.Models.PropertiesTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TagId")
                        .HasColumnType("int(11)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .HasName("PropertyId");

                    b.HasIndex("TagId")
                        .HasName("TagId");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("PropertiesTags");
                });

            modelBuilder.Entity("Bridge.ERP.RecycledCampaignsLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<double?>("CallLength")
                        .HasColumnType("double");

                    b.Property<string>("CallType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Cellphone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactSucess")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<int?>("CycleNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("DialNumberType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Disposition")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DispositionForRecyle")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Faxphone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Homephone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("IsHit")
                        .HasColumnType("double");

                    b.Property<string>("ListName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("OutboundCallerId")
                        .HasColumnName("OutboundCallerID")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int(11)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int(11)");

                    b.Property<string>("ReasonCode")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RecordingFileName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Recycle")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SecondaryVoicePhone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.Property<string>("User")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VoicePhone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("WrapUpTime")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("RecycledCampaignsLists");
                });

            modelBuilder.Entity("Bridge.ERP.Seguradora", b =>
                {
                    b.Property<int>("IdSeguradora")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idSeguradora")
                        .HasColumnType("int(11)");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnName("CNPJ")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("NomeSeguradora")
                        .IsRequired()
                        .HasColumnName("nomeSeguradora")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Ramo")
                        .IsRequired()
                        .HasColumnName("RAMO")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("StatusSeguradora")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("IdSeguradora")
                        .HasName("PRIMARY");

                    b.ToTable("Seguradora");
                });

            modelBuilder.Entity("Bridge.ERP.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TagDescription")
                        .HasColumnType("varchar(5000)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Bridge.ERP.TransactionsCampaigns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int(11)");

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("TenantId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasName("FK_Customers_idx");

                    b.ToTable("TransactionsCampaigns");
                });

            modelBuilder.Entity("Bridge.ERP.VehiclesOnMarket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AvailableStatus")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(15000)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ExtractTime")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("FollowUp")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("FollowUpUser")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Location")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(5000)");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Photos")
                        .HasColumnType("varchar(10000)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("RadiusDistance")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SaleStatus")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("Seller")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SellerType")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("SourceName")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("SourceType")
                        .HasColumnType("varchar(55)")
                        .HasMaxLength(55);

                    b.Property<string>("Titlestatus")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Transmition")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UrlVehicle")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("VehicleFull")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VehicleFullDecoded")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VehicleMake")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VehicleModel")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VehicleSeries")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VehicleYear")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Vin")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("VehiclesOnMarket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bridge.ERP.Category", b =>
                {
                    b.HasOne("Bridge.ERP.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("category_ibfk_1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bridge.ERP.Contacts", b =>
                {
                    b.HasOne("Bridge.ERP.Customers", "Tenant")
                        .WithMany("Contacts")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("Contacts_ibfk_1");
                });

            modelBuilder.Entity("Bridge.ERP.ContactsLocations", b =>
                {
                    b.HasOne("Bridge.ERP.Locations", "Location")
                        .WithMany("ContactsLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("ContactsLocations_ibfk_2")
                        .IsRequired();

                    b.HasOne("Bridge.ERP.Customers", "Tenant")
                        .WithMany("ContactsLocations")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("ContactsLocations_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.ERP.CycleCampaignsTransactions", b =>
                {
                    b.HasOne("Bridge.ERP.Campaigns", "Campaign")
                        .WithMany("CycleCampaignsTransactions")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("CycleCampaignsTransactions_ibfk_1")
                        .IsRequired();

                    b.HasOne("Bridge.ERP.Customers", "Tenant")
                        .WithMany("CycleCampaignsTransactions")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Customers")
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.ERP.ImportHistory", b =>
                {
                    b.HasOne("Bridge.ERP.Customers", "Tenant")
                        .WithMany("ImportHistory")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("ImportHistory_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.ERP.LeadsFollowUps", b =>
                {
                    b.HasOne("Bridge.ERP.Models.Properties", "IdNavigation")
                        .WithOne("LeadsFollowUpsIdNavigation")
                        .HasForeignKey("Bridge.ERP.LeadsFollowUps", "Id")
                        .HasConstraintName("FK_PropertyId")
                        .IsRequired();

                    b.HasOne("Bridge.ERP.Models.Properties", "Property")
                        .WithMany("LeadsFollowUpsProperty")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.ERP.Models.PropertiesLists", b =>
                {
                    b.HasOne("Bridge.ERP.Lists", "List")
                        .WithMany("PropertiesLists")
                        .HasForeignKey("ListId")
                        .HasConstraintName("PropertiesLists_ibfk_2")
                        .IsRequired();

                    b.HasOne("Bridge.ERP.Models.Properties", "Property")
                        .WithMany("PropertiesLists")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PropertiesLists_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("Bridge.ERP.Models.PropertiesTags", b =>
                {
                    b.HasOne("Bridge.ERP.Models.Properties", "Property")
                        .WithMany("PropertiesTags")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("PropertiesTags_ibfk_1")
                        .IsRequired();

                    b.HasOne("Bridge.ERP.Tags", "Tag")
                        .WithMany("PropertiesTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("PropertiesTags_ibfk_2")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
